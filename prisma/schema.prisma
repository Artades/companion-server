generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model City {
  id     String  @id @default(uuid())
  name   String
  events Event[]
  users  User[]
}

model Interest {
  id       String            @id @default(uuid())
  name     String            @unique
  events   EventInterest[]
  profiles ProfileInterest[]
}

model ProfileInterest {
  profileId  String
  interestId String
  interest   Interest @relation(fields: [interestId], references: [id])
  profile    Profile  @relation(fields: [profileId], references: [id])

  @@id([profileId, interestId])
}

model Profile {
  id          String            @id @default(uuid())
  avatar      String?
  bio         String?
  socialLinks String[]
  dateOfBirth DateTime?
  userId      String            @unique
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  interests   ProfileInterest[]
}

model EventMedia {
  id         String    @id @default(uuid())
  url        String
  type       MediaType
  caption    String?
  order      Int
  eventId    String
  uploadedAt DateTime  @default(now())
  event      Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model Event {
  id              String             @id @default(uuid())
  label           String
  description     String?
  date            DateTime
  duration        Float?
  startTime       String?
  cityId          String
  location        String
  locationLink    String?
  image           String?
  difficulty      EventDifficulty?
  maxParticipants Int?
  isCancelled     Boolean            @default(false)
  privacyType     EventPrivacyType
  creatorId       String
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  city            City               @relation(fields: [cityId], references: [id])
  creator         User               @relation("CreatedEvents", fields: [creatorId], references: [id])
  interests       EventInterest[]
  media           EventMedia[]
  participants    EventParticipant[]
  reviews         EventReview[]
}

model EventReview {
  id        String   @id @default(uuid())
  rating    Int
  content   String?
  createdAt DateTime @default(now())
  userId    String
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, eventId])
}

model EventParticipant {
  eventId  String
  userId   String
  joinedAt DateTime @default(now())
  event    Event    @relation(fields: [eventId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@id([eventId, userId])
}

model EventInterest {
  eventId    String
  interestId String
  event      Event    @relation(fields: [eventId], references: [id])
  interest   Interest @relation(fields: [interestId], references: [id])

  @@id([eventId, interestId])
}

model User {
  id                 String             @id @default(uuid())
  email              String             @unique
  password           String
  name               String?
  nickname           String
  role               UserRole           @default(USER)
  cityId             String
  createdAt          DateTime           @default(now()) @map("created_at")
  updatedAt          DateTime           @updatedAt @map("updated_at")
  eventsCreated      Event[]            @relation("CreatedEvents")
  eventsParticipated EventParticipant[]
  reviews            EventReview[]
  profile            Profile?
  city               City               @relation(fields: [cityId], references: [id])

  @@map("users")
}

enum UserRole {
  USER
  ADMIN
  SUBSCRIBER
}

enum EventDifficulty {
  EASY
  MODERATE
  HARD
}

enum MediaType {
  IMAGE
  VIDEO
  GPX
  OTHER
}

enum EventPrivacyType {
  PRIVATE
  PUBLIC
}
